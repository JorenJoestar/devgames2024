
uint debug_write(uint index, vec4 char) {
	data[index] = char;
	++index;
	return index;
}

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main() {
	ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

	// Write global label with gpu font system data
	uint entry_index = atomicAdd(current_entry_index, 1);
    uint data_index = atomicAdd(current_data_index, 16);

    data[data_index] = ch_t;
    data[data_index + 1] = ch_e;
    data[data_index + 2] = ch_s;
    data[data_index + 3] = ch_t;
    data[data_index + 4] = ch_spc;
    data[data_index + 5] = ch_i;
    data[data_index + 6] = ch_d;
    data[data_index + 7] = ch_r;
    data[data_index + 8] = ch_a;
    data[data_index + 9] = ch_spc;
    data[data_index + 10] = get_digit(current_data_index, 1);
    data[data_index + 11] = get_digit(current_data_index, 0);
    data[data_index + 12] = ch_spc;
    data[data_index + 13] = get_digit(current_entry_index, 1);
    data[data_index + 14] = get_digit(current_entry_index, 0);

	vec2 print_pos = floor(vec2(STRWIDTH(1), STRHEIGHT(4)));
    entries[entry_index].x = print_pos.x;
    entries[entry_index].y = print_pos.y;
    entries[entry_index].offset = data_index;
    entries[entry_index].count = 16;

    // Write single character dispatch informations
    uint global_index = 0;
    for (uint e = 0; e < current_entry_index; ++e) {
    	uint entry_data_index = entries[0].offset;
        for (uint i = 0; i < entries[0].count; ++i) {
        	dispatches[global_index].x = e;
        	dispatches[global_index].y = i;

        	++global_index;
        }
    }

    // Write indirect draw values
    vertex_count = 6;
	instance_count = global_index;
	first_vertex = 0;
	first_instance = 0;
	pad00 = 0;
}
